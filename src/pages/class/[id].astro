---
import type { PostgrestResponse } from "@supabase/supabase-js";
import _ from "lodash";
import Assignmentlist from "../../components/assignmentlist.astro";
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../lib/backend";
import type { Assignment, Class } from "../../lib/db";

const id = parseInt(Astro.params.id!)

const currentUser = (await supabase.auth.getUser(Astro.cookies.get("my-access-token").value)).data.user


//Resolve class
async function resolve(): Promise<Class[] | Response> {
    try {
        const currentUser = await supabase.auth.getUser(Astro.cookies.get("my-access-token").value)
        let {data: c, error}: PostgrestResponse<Class>= await supabase.from("Class").select("*").eq("id", id).limit(1)
        if(error || c==null) throw error
        return c!
    } catch {
        return Astro.redirect("/404")
    }
}

let c: Class[] | Response = await resolve()

if(c instanceof Response) {
    return c
}

let _class = c[0]

let {data: alist}: PostgrestResponse<Assignment> = await supabase.from("Assignment")
    .select("*")
    .eq("class_id", _class.id)
    .order("created_at", {ascending: false})
    .limit(50)

let assignments = _.sortBy(_.groupBy(alist, x => new Date(x.created_at!).toDateString()), (x,y) => y)
---

<Layout title={_class.name}>
    <div class="flex flex-col items-center gap-y-10">
        <h1 class="text-center text-3xl 2xl:text-5xl text-white mt-10">{_class.name}</h1>
        {currentUser && <button class="btn btn-primary btn-md 2xl:btn-lg" onclick={`window.location = '/assignment/new?class=${id}'`}>Post Assignment</button>}
        {assignments.map(day => (
            <Assignmentlist day={day} />
        ))}
    </div>
</Layout>